# Generated by Django 2.2.8 on 2019-12-16 01:13

import django.contrib.auth.models
import django.utils.timezone
from django.db import migrations, models

import codertheory.general.custom_fields
import codertheory.general.generator
import codertheory.users.models


class Migration(migrations.Migration):
    replaces = [('users', '0001_initial'), ('users', '0002_auto_20191012_1251'), ('users', '0003_auto_20191012_1301'),
                ('users', '0004_auto_20191024_1653'), ('users', '0005_auto_20191026_1657'), ('users', '0006_user_role'),
                ('users', '0007_auto_20191109_1326'), ('users', '0007_auto_20191106_2209'),
                ('users', '0008_merge_20191114_1652'), ('users', '0009_auto_20191215_0731'),
                ('users', '0010_auto_20191215_0731')]

    initial = True
    atomic = False

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', codertheory.general.custom_fields.NanoIDField(auto_created=True,
                                                                     default=codertheory.general.generator.generate_id,
                                                                     editable=False, max_length=10, primary_key=True,
                                                                     serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
                ('avatar', models.ImageField(null=True, upload_to='')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='user',
            managers=[
                ('objects', codertheory.users.models.CustomUserManager()),
            ],
        ),
        migrations.AlterField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False,
                                      help_text='Designates whether the user can log into the admin site.',
                                      verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.CharField(blank=True, max_length=75, verbose_name="User's Role"),
        ),
        migrations.AlterField(
            model_name='user',
            name='avatar',
            field=models.ImageField(blank=True, null=True, upload_to=''),
        ),
        migrations.AlterField(
            model_name='user',
            name='avatar',
            field=models.ImageField(blank=True, null=True, upload_to=''),
        ),
        migrations.AlterModelTable(
            name='user',
            table='user',
        ),
    ]
