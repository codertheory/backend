# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutations
    subscription: Subscription
}

interface BaseNode {
    "The ID of the object."
    id: ID!
}

type ClearVoteMutation {
    error: String
    success: Boolean
}

type CreateGameMutation {
    game: ShiritoriGameType
}

type CreatePollMutation {
    poll: PollType
}

type ErrorType {
    field: String!
    messages: [String!]!
}

type LeaveGameMutation {
    game: ShiritoriGameType
}

type Mutations {
    clearVote(voteId: ID): ClearVoteMutation
    createGame(password: String): CreateGameMutation
    createPoll(description: String, name: String!, options: [PollOptionInput]!): CreatePollMutation
    createProject(input: ProjectMutationInput!): ProjectMutationPayload
    leaveGame(gameId: ID, playerId: ID): LeaveGameMutation
    takeTurn(gameId: ID, word: String): TakeTurnMutation
    votePoll(
        "Poll Option ID"
        optionId: ID,
        "Poll ID"
        pollId: ID,
        "The ID of the Vote, used for changing a vote"
        voteId: ID
    ): PollVoteMutation
}

"The Relay compliant `PageInfo` type, containing data necessary to paginate this connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type PollOptionType implements BaseNode {
    Order: Int!
    createdAt: DateTime!
    "The ID of the object."
    id: ID!
    option: String!
    percentage: Float
    poll: PollType!
    pollvoteSet: [PollVoteType!]!
    votes: Int
}

type PollOptionTypeConnection {
    "Contains the nodes in this connection."
    edges: [PollOptionTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `PollOptionType` and its cursor."
type PollOptionTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: PollOptionType
}

type PollSubscription {
    pollById: PollType
}

type PollType implements BaseNode {
    active: Boolean!
    canVote: Boolean
    createdAt: DateTime!
    description: String
    "The ID of the object."
    id: ID!
    name: String!
    options: [PollOptionType!]
    polloptionSet(after: String, before: String, first: Int, last: Int, offset: Int): PollOptionTypeConnection!
    pollvoteSet: [PollVoteType!]!
    user: UserType
    "The Clients Vote, if one exists"
    vote: PollVoteType
    voteCount: Int
}

type PollTypeConnection {
    "Contains the nodes in this connection."
    edges: [PollTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `PollType` and its cursor."
type PollTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: PollType
}

type PollVoteMutation {
    vote: PollVoteType
}

type PollVoteType {
    Order: Int!
    createdAt: DateTime!
    id: String!
    ip: String
    metadata: JSONString
    option: PollOptionType!
    poll: PollType!
    user: UserType
}

type ProjectMutationPayload {
    clientMutationId: String
    createdAt: DateTime
    currentVersion: String
    description: String
    "May contain more than one error for same field."
    errors: [ErrorType]
    id: String
    lastUpdatedAt: DateTime
    link: String
    name: String
    owner: String
    slug: String
    status: String
}

type ProjectType {
    createdAt: DateTime!
    currentVersion: String!
    description: String
    id: String!
    lastUpdatedAt: DateTime
    link: String
    name: String!
    owner: UserType!
    slug: String
    status: ProjectsProjectStatusChoices!
}

type Query {
    "The ID of the object"
    gameById(id: ID!): ShiritoriGameType
    games(after: String, before: String, finished: Boolean, first: Int, last: Int, offset: Int, started: Boolean): ShiritoriGameTypeConnection
    "The ID of the object"
    pollById(id: ID!): PollType
    polls(active: Boolean, after: String, before: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, offset: Int): PollTypeConnection
    projects: [ProjectType]
    users: [UserType]
}

type ShiritoriGameType implements BaseNode {
    createdAt: DateTime!
    finished: Boolean!
    "The ID of the object."
    id: ID!
    lastEdited: DateTime!
    lastWord: String
    playerIndex: Int!
    started: Boolean!
    timer: Int!
}

type ShiritoriGameTypeConnection {
    "Contains the nodes in this connection."
    edges: [ShiritoriGameTypeEdge]!
    "Pagination data for this connection."
    pageInfo: PageInfo!
}

"A Relay edge containing a `ShiritoriGameType` and its cursor."
type ShiritoriGameTypeEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: ShiritoriGameType
}

type Subscription {
    pollSubscription(
        "ID of the Poll"
        id: ID
    ): PollSubscription
}

type TakeTurnMutation {
    score: Int
}

type UserType {
    avatar: String
    dateJoined: DateTime!
    email: String!
    firstName: String!
    id: String!
    "Designates whether this user should be treated as active. Unselect this instead of deleting accounts."
    isActive: Boolean!
    "Designates whether the user can log into the admin site."
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    name: String!
    pollSet(active: Boolean, after: String, before: String, first: Int, last: Int, name: String, name_Icontains: String, name_Istartswith: String, offset: Int): PollTypeConnection!
    pollvoteSet: [PollVoteType!]!
    projectSet: [ProjectType!]!
    role: String!
}

"An enumeration."
enum ProjectsProjectStatusChoices {
    "Active"
    ACTIVE
    "Archived"
    ARCHIVED
    "Backlog"
    BACKLOG
    "Unactive"
    UNACTIVE
}

input PollOptionInput {
    option: String
}

input ProjectMutationInput {
    clientMutationId: String
    currentVersion: String!
    description: String
    id: String
    lastUpdatedAt: DateTime
    link: String
    name: String!
    owner: String!
    slug: String
    status: String
}


"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString
